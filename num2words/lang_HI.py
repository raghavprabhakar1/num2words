# -*- encoding: utf-8 -*-
# Copyright (c) 2003, Taro Ogawa.  All Rights Reserved.
# Copyright (c) 2013, Savoir-faire Linux inc.  All Rights Reserved.

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301 USA

from __future__ import unicode_literals

from .base import Num2Word_Base


class Num2Word_HI(Num2Word_Base):
    CURRENCY_FORMS = {
    'EUR': (('यूरो', 'यूरो'), ('सेंट', 'सेंट')),
    'ESP': (('पेसेटा', 'पेसेटा'), ('सेंट', 'सेंट')),
    'USD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'PEN': (('सोल', 'सोल'), ('सेंट', 'सेंट')),
    'CRC': (('कोलोन', 'कोलोन'), ('सेंट', 'सेंट')),
    'AUD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'CAD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'GBP': (('पाउंड', 'पाउंड'), ('पेनी', 'पेनी')),
    'RUB': (('रूबल', 'रूबल'), ('कोपेक', 'कोपेक')),
    'SEK': (('क्रोना', 'क्रोना'), ('ओरे', 'ओरे')),
    'NOK': (('क्रोना', 'क्रोना'), ('ओरे', 'ओरे')),
    'PLN': (('ज्लोटी', 'ज्लोटी'), ('ग्रोस', 'ग्रोस')),
    'MXN': (('पेसो', 'पेसो'), ('सेंट', 'सेंट')),
    'RON': (('लेउ', 'लेउ'), ('बन', 'बनी')),
    'INR': (('रुपया', 'रुपये'), ('पैसा', 'पैसे')),
    'HUF': (('फ्लोरिन', 'फ्लोरिन'), ('फिलर', 'फिलर')),
    'FRF': (('फ्रां', 'फ्रां'), ('सेंट', 'सेंट')),
    'CNY': (('युआन', 'युआन'), ('फेन', 'जियाओ')),
    'CZK': (('कोरुना', 'कोरुना'), ('हेलेर', 'हेलेर')),
    'NIO': (('कॉरडोबा', 'कॉरडोबा'), ('सेंट', 'सेंट')),
    'VES': (('बोलिवार', 'बोलिवार'), ('सेंट', 'सेंट')),
    'BRL': (('रियल', 'रियल'), ('सेंट', 'सेंट')),
    'CHF': (('फ्रैंक', 'फ्रैंक'), ('सेंट', 'सेंट')),
    'JPY': (('येन', 'येन'), ('सेन', 'सेन')),
    'KRW': (('वॉन', 'वॉन'), ('जोन', 'जोन')),
    'KPW': (('वॉन', 'वॉन'), ('चोन', 'चोन')),
    'TRY': (('लीरा', 'लीरा'), ('कुरुश', 'कुरुश')),
    'ZAR': (('रैंड', 'रैंड'), ('सेंट', 'सेंट')),
    'KZT': (('टेंगे', 'टेंगे'), ('तेन', 'तेन')),
    'UAH': (('ह्रीवनिया', 'ह्रीवनिया'), ('कोपियका', 'कोपियका')),
    'THB': (('बाहत', 'बाहत'), ('सेंट', 'सेंट')),
    'AED': (('दिरहम', 'दिरहम'), ('फिल्स', 'फिल्स')),
    'AFN': (('अफ़ग़ानी', 'अफ़ग़ानी'), ('पुल', 'पुल')),
    'ALL': (('लेक', 'लेक'), ('किंदार्क', 'किंदार्क')),
    'AMD': (('द्राम', 'द्राम'), ('लुमा', 'लुमा')),
    'ANG': (('गिल्डर', 'गिल्डर'), ('सेंट', 'सेंट')),
    'AOA': (('क्वांजा', 'क्वांजा'), ('सेंट', 'सेंट')),
    'ARS': (('पेसो', 'पेसो'), ('सेंट', 'सेंट')),
    'AWG': (('गिल्डर', 'गिल्डर'), ('सेंट', 'सेंट')),
    'AZN': (('मनात', 'मनात'), ('केपिक', 'केपिक')),
    'BBD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'BDT': (('टाका', 'टाका'), ('पैसा', 'पैसा')),
    'BGN': (('लेव', 'लेव'), ('स्तोटिंका', 'स्तोटिंका')),
    'BHD': (('दिनार', 'दिनार'), ('फिल्स', 'फिल्स')),
    'BIF': (('फ्रैंक', 'फ्रैंक'), ('सेंट', 'सेंट')),
    'BMD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'BND': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'BOB': (('बोलिवियानो', 'बोलिवियानो'), ('सेंट', 'सेंट')),
    'BSD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'BTN': (('न्गुल्ट्रम', 'न्गुल्ट्रम'), ('चेत्रुम', 'चेत्रुम')),
    'BWP': (('पुला', 'पुला'), ('थेबे', 'थेबे')),
    'BYN': (('रूबल', 'रूबल'), ('कोपेक', 'कोपेक')),
    'BYR': (('रूबल', 'रूबल'), ('कोपेक', 'कोपेक')),
    'BZD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'CDF': (('फ्रैंक', 'फ्रैंक'), ('सेंट', 'सेंट')),
    'CLP': (('पेसो', 'पेसो'), ('सेंट', 'सेंट')),
    'COP': (('पेसो', 'पेसो'), ('सेंट', 'सेंट')),
    'CUP': (('पेसो', 'पेसो'), ('सेंट', 'सेंट')),
    'CVE': (('एस्कूडो', 'एस्कूडो'), ('सेंट', 'सेंट')),
    'CYP': (('पाउंड', 'पाउंड'), ('सेंट', 'सेंट')),
    'DJF': (('फ्रैंक', 'फ्रैंक'), ('सेंट', 'सेंट')),
    'DKK': (('क्रोना', 'क्रोना'), ('ओरे', 'ओरे')),
    'DOP': (('पेसो', 'पेसो'), ('सेंट', 'सेंट')),
    'DZD': (('दिनार', 'दिनार'), ('सेंट', 'सेंट')),
    'ECS': (('सुक्रे', 'सुक्रे'), ('सेंट', 'सेंट')),
    'EGP': (('पाउंड', 'पाउंड'), ('पियास्त्रा', 'पियास्त्रा')),
    'ERN': (('नाक्फा', 'नाक्फा'), ('सेंट', 'सेंट')),
    'ETB': (('बिर्र', 'बिर्र'), ('सेंट', 'सेंट')),
    'FJD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'FKP': (('पाउंड', 'पाउंड'), ('पेनी', 'पेनी')),
    'GEL': (('लारी', 'लारी'), ('तेत्री', 'तेत्री')),
    'GHS': (('सीडी', 'सीडी'), ('पेसेवा', 'पेसेवा')),
    'GIP': (('पाउंड', 'पाउंड'), ('पेनी', 'पेनी')),
    'GMD': (('डालासी', 'डालासी'), ('बुटुट', 'बुटुट')),
    'GNF': (('फ्रैंक', 'फ्रैंक'), ('सेंट', 'सेंट')),
    'GTQ': (('क्वेत्ज़ाल', 'क्वेत्ज़ाल'), ('सेंट', 'सेंट')),
    'GYD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'HKD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'HNL': (('लेम्पिरा', 'लेम्पिरा'), ('सेंट', 'सेंट')),
    'HRK': (('कूना', 'कूना'), ('लिपा', 'लिपा')),
    'HTG': (('गोर्दे', 'गोर्दे'), ('सेंट', 'सेंट')),
    'IDR': (('रूपिया', 'रूपिया'), ('सेंट', 'सेंट')),
    'ILS': (('शेकेल', 'शेकेल'), ('एगोरा', 'एगोरा')),
    'IQD': (('दिनार', 'दिनार'), ('फिल्स', 'फिल्स')),
    'IRR': (('रियाल', 'रियाल'), ('दिनार', 'दिनार')),
    'ISK': (('क्रोना', 'क्रोना'), ('एयर', 'औरर')),
    'ITL': (('लीरा', 'लीरा'), ('सेंट', 'सेंट')),
    'JMD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'JOD': (('दिनार', 'दिनार'), ('पियास्त्रा', 'पियास्त्रा')),
    'KES': (('शिलिंग', 'शिलिंग'), ('सेंट', 'सेंट')),
    'KGS': (('सोम', 'सोम'), ('तियन', 'तियन')),
    'KHR': (('रियेल', 'रियेल'), ('सेंट', 'सेंट')),
    'KMF': (('फ्रैंक', 'फ्रैंक'), ('सेंट', 'सेंट')),
    'KWD': (('दिनार', 'दिनार'), ('फिल्स', 'फिल्स')),
    'KYD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'LAK': (('किप', 'किप'), ('एट', 'एट')),
    'LBP': (('पाउंड', 'पाउंड'), ('पियास्त्रा', 'पियास्त्रा')),
    'LKR': (('रूपी', 'रूपी'), ('सेंट', 'सेंट')),
    'LRD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'LSL': (('लोटी', 'लोटी'), ('सेंट', 'सेंट')),
    'LTL': (('लिता', 'लिता'), ('सेंट', 'सेंट')),
    'LVL': (('लाट्स', 'लाट्स'), ('सेंट', 'सेंट')),
    'LYD': (('दिनार', 'दिनार'), ('दिरहम', 'दिरहम')),
    'MAD': (('दिरहम', 'दिरहम'), ('सेंट', 'सेंट')),
    'MDL': (('लेऊ', 'लेऊ'), ('बैन', 'बैनी')),
    'MGA': (('आरियारी', 'आरियारी'), ('इरेमबिलान्जा', 'इरेमबिलान्जा')),
    'MKD': (('डेनार', 'डेनार'), ('देन', 'देन')),
    'MMK': (('क्यात', 'क्यात'), ('प्या', 'प्या')),
    'MNT': (('टुग्रिक', 'टुग्रिक'), ('मोगो', 'मोगो')),
    'MOP': (('पटाका', 'पटाका'), ('एवो', 'एवो')),
    'MRO': (('ऊगुइया', 'ऊगुइया'), ('खूम', 'खूम')),
    'MRU': (('ऊगुइया', 'ऊगुइया'), ('खूम', 'खूम')),
    'MUR': (('रूपी', 'रूपी'), ('सेंट', 'सेंट')),
    'MVR': (('रुफिया', 'रुफिया'), ('लारी', 'लारी')),
    'MWK': (('क्वाचा', 'क्वाचा'), ('ताम्बाला', 'ताम्बाला')),
    'MYR': (('रिंगिट', 'रिंगिट'), ('सेंट', 'सेंट')),
    'MZN': (('मेटिकल', 'मेटिकल'), ('सेंट', 'सेंट')),
    'NAD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'NGN': (('नाइरा', 'नाइरा'), ('कोबो', 'कोबो')),
    'NPR': (('रूपी', 'रूपी'), ('पैसा', 'पैसा')),
    'NZD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'OMR': (('रियाल', 'रियाल'), ('बाइसा', 'बाइसा')),
    'PAB': (('बैल्बोआ', 'बैल्बोआ'), ('सेंट', 'सेंट')),
    'PGK': (('किना', 'किना'), ('तोया', 'तोया')),
    'PHP': (('पेसो', 'पेसो'), ('सेंट', 'सेंट')),
    'PKR': (('रूपी', 'रूपी'), ('पैसा', 'पैसा')),
    'PLZ': (('ज्लोटी', 'ज्लोटी'), ('ग्रोस', 'ग्रोस')),
    'PYG': (('गुआरानी', 'गुआरानी'), ('सेंट', 'सेंट')),
    'QAR': (('रियाल', 'रियाल'), ('दिरहम', 'दिरहम')),
    'RSD': (('दिनार', 'दिनार'), ('पारा', 'पारा')),
    'RWF': (('फ्रैंक', 'फ्रैंक'), ('सेंट', 'सेंट')),
    'SAR': (('रियाल', 'रियाल'), ('हालाला', 'हालाला')),
    'SBD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'SCR': (('रूपी', 'रूपी'), ('सेंट', 'सेंट')),
    'SDG': (('दिनार', 'दिनार'), ('पैसा', 'पैसा')),
    'SHP': (('पाउंड', 'पाउंड'), ('पेनी', 'पेनी')),
    'SIT': (('टोलर', 'टोलर'), ('सेंट', 'सेंट')),
    'SKK': (('कोरुना', 'कोरुना'), ('हलेर', 'हलेर')),
    'SLL': (('लियोन', 'लियोन'), ('सेंट', 'सेंट')),
    'SOS': (('शिलिंग', 'शिलिंग'), ('सेंट', 'सेंट')),
    'SRD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'STD': (('डोबरा', 'डोबरा'), ('सेंट', 'सेंट')),
    'SVC': (('कोलन', 'कोलन'), ('सेंट', 'सेंट')),
    'SYP': (('पाउंड', 'पाउंड'), ('पियास्त्रा', 'पियास्त्रा')),
    'SZL': (('लिलांजेनी', 'लिलांजेनी'), ('सेंट', 'सेंट')),
    'TJS': (('सोमोनी', 'सोमोनी'), ('दिरम', 'दिरम')),
    'TMM': (('मनात', 'मनात'), ('तेन', 'तेन')),
    'TND': (('दिनार', 'दिनार'), ('मिल्लिम', 'मिल्लिम')),
    'TOP': (('पांगा', 'पांगा'), ('सेंट', 'सेंट')),
    'TRL': (('लीरा', 'लीरा'), ('कुरुश', 'कुरुश')),
    'TTD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'TWD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'TZS': (('शिलिंग', 'शिलिंग'), ('सेंट', 'सेंट')),
    'UGX': (('शिलिंग', 'शिलिंग'), ('सेंट', 'सेंट')),
    'UYU': (('पेसो', 'पेसो'), ('सेंट', 'सेंट')),
    'UZS': (('सोम', 'सोम'), ('तियिन', 'तियिन')),
    'VND': (('डोंग', 'डोंग'), ('हू', 'हू')),
    'VUV': (('वातु', 'वातु'), ('सेंट', 'सेंट')),
    'WST': (('ताला', 'ताला'), ('सेंट', 'सेंट')),
    'XAF': (('फ्रैंक', 'फ्रैंक'), ('सेंट', 'सेंट')),
    'XCD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    'XOF': (('फ्रैंक', 'फ्रैंक'), ('सेंट', 'सेंट')),
    'XPF': (('फ्रैंक', 'फ्रैंक'), ('सेंट', 'सेंट')),
    'YER': (('रियाल', 'रियाल'), ('बैसा', 'बैसा')),
    'ZMK': (('क्वाचा', 'क्वाचा'), ('न्ग्वेते', 'न्ग्वेते')),
    'ZMW': (('क्वाचा', 'क्वाचा'), ('न्ग्वेते', 'न्ग्वेते')),
    'ZWD': (('डॉलर', 'डॉलर'), ('सेंट', 'सेंट')),
    }



    def set_high_numwords(self, high):
        for n, word in self.high_numwords:
            self.cards[10 ** n] = word

    def merge(self, lpair, rpair):
        ltext, lnum = lpair
        rtext, rnum = rpair
        if lnum == 1 and rnum < 100:
            return (rtext, rnum)
        elif 100 > lnum > rnum:
            return ("%s-%s" % (ltext, rtext), lnum + rnum)
        elif lnum >= 100 > rnum:
            return ("%s %s" % (ltext, rtext), lnum + rnum)
        elif rnum > lnum:
            return ("%s %s" % (ltext, rtext), lnum * rnum)
        return ("%s %s" % (ltext, rtext), lnum + rnum)

    def setup(self):
        self.low_numwords = ["निन्यानवे", "अट्ठानवे", "सतानवे", "छियानवे",
                             "पचानवे", "चौरानवे", "तिरानवे", "बानवे",
                             "इक्यानवे", "नब्बे", "नवासी", "अट्ठासी",
                             "सतासी", "छियासी", "पचासी", "चौरासी",
                             "तिरासी", "बयासी", "इक्यासी",
                             "अस्सी", "उन्नासी", "अठहतर", "सतहतर",
                             "छिहतर", "पचहतर", "चौहतर", "तिहतर",
                             "बहतर", "इकहतर", "सत्तर", "उनहतर",
                             "अड़सठ", "सड़सठ", "छियासठ", "पैंसठ",
                             "चौंसठ", "तिरसठ", "बासठ", "इकसठ",
                             "साठ", "उनसठ", "अठावन", "सतावन",
                             "छप्पन", "पचपन", "चौवन", "तिरपन",
                             "बावन", "इक्यावन", "पचास", "उनचास",
                             "अड़तालीस", "सैंतालीस", "छयालिस",
                             "पैंतालीस", "चवालीस", "तैतालीस", "बयालीस",
                             "इकतालीस", "चालीस", "उनतालीस", "अड़तीस",
                             "सैंतीस", "छतीस", "पैंतीस", "चौंतीस",
                             "तैंतीस", "बतीस", "इकतीस", "तीस",
                             "उनतीस", "अट्ठाइस", "सताइस", "छब्बीस",
                             "पच्चीस", "चौबीस", "तेइस", "बाईस",
                             "इकीस", "बीस", "उन्नीस", "अठारह",
                             "सत्रह", "सोलह", "पंद्रह", "चौदह",
                             "तेरह", "बारह", "ग्यारह", "दस",
                             "नौ", "आठ", "सात", "छह", "पांच",
                             "चार", "तीन", "दो", "एक", "शून्य"]
        self.mid_numwords = [(100, "सौ")]
        self.high_numwords = [(7, "करोड़"),
                              (5, "लाख"),
                              (3, "हज़ार")]
        self.pointword = 'दशमलव'

        self.ords = {"एक": "पहला",
             "दो": "दूसरा",
             "तीन": "तीसरा",
             "चार": "चौथा",
             "पांच": "पाँचवाँ",
             "छह": "छठा",
             "सात": "सातवाँ",
             "आठ": "आठवाँ",
             "नौ": "नौवाँ",
             "दस": "दसवाँ",
             "ग्यारह": "ग्यारहवाँ",
             "बारह": "बारहवाँ",
             "तेरह": "तेरहवाँ",
             "चौदह": "चौदहवाँ",
             "पंद्रह": "पंद्रहवाँ",
             "सोलह": "सोलहवाँ",
             "सत्रह": "सत्रहवाँ",
             "अठारह": "अठारहवाँ",
             "उन्नीस": "उन्नीसवाँ",
             "बीस": "बीसवाँ",
             "इकीस": "इकीसवाँ",
             "बाईस": "बाईसवाँ",
             "तेइस": "तेइसवाँ",
             "चौबीस": "चौबीसवाँ",
             "पच्चीस": "पच्चीसवाँ",
             "छब्बीस": "छब्बीसवाँ",
             "सताइस": "सताइसवाँ",
             "अट्ठाइस": "अट्ठाइसवाँ",
             "उनतीस": "उनतीसवाँ",
             "तीस": "तीसवाँ",
             "इकतीस": "इकतीसवाँ",
             "बतीस": "बतीसवाँ",
             "तैंतीस": "तैंतीसवाँ",
             "चौंतीस": "चौंतीसवाँ",
             "पैंतीस": "पैंतीसवाँ",
             "छतीस": "छतीसवाँ",
             "सैंतीस": "सैंतीसवाँ",
             "अड़तीस": "अड़तीसवाँ",
             "उनतालीस": "उनतालीसवाँ",
             "चालीस": "चालीसवाँ",
             "इकतालीस": "इकतालीसवाँ",
             "बयालीस": "बयालीसवाँ",
             "तैतालीस": "तैतालीसवाँ",
             "चवालीस": "चवालीसवाँ",
             "पैंतालीस": "पैंतालीसवाँ",
             "छयालिस": "छयालिसवाँ",
             "सैंतालीस": "सैंतालीसवाँ",
             "अड़तालीस": "अड़तालीसवाँ",
             "उनचास": "उनचासवाँ"}
        
        self.negword = "ऋण"  # Word for 'minus'
        self.CURRENCY_ADJECTIVES = {'INR': 'भारतीय'}  # Adjective for Indian Rupee


    def to_ordinal(self, value):
        self.verify_ordinal(value)
        outwords = self.to_cardinal(value).split(" ")
        lastword = outwords[-1].lower()
        try:
            lastword = self.ords[lastword]
        except KeyError:
            lastword += "वां"
        outwords[-1] = lastword
        return " ".join(outwords)

    def to_ordinal_num(self, value):
        self.verify_ordinal(value)
        return "%s%s" % (value, self.to_ordinal(value)[-2:])


    def to_year(self, val, suffix=None, longval=True):
        if val < 0:
            val = abs(val)
            suffix = 'ईसा पूर्व' if not suffix else suffix
        high, low = (val // 100, val % 100)
        # If year is 00XX, X00X, or beyond 9999, go cardinal.
        if (high == 0 or (high % 10 == 0 and low < 10) or high >= 100):
            valtext = self.to_cardinal(val)
        else:
            hightext = self.to_cardinal(high)
            if low == 0:
                lowtext = "शून्य"
            elif low < 10:
                lowtext = "शून्य-%s" % self.to_cardinal(low)
            else:
                lowtext = self.to_cardinal(low)
            valtext = "%s सौ %s" % (hightext, lowtext)
        return (valtext if not suffix else "%s %s" % (valtext, suffix))
    

    def to_currency(self, val, currency='INR', cents=True, separator=',', adjective=False):
        """
        Args:
            val (int or float): Numeric value
            currency (str): Currency code
            cents (bool): Verbose cents
            separator (str): Cent separator
            adjective (bool): Prefix currency name with adjective

        Returns:
            str: Formatted string
        """
        left, right, is_negative = self.split_number(val)

        try:
            cr1, cr2 = self.CURRENCY_FORMS[currency]
        except KeyError:
            raise NotImplementedError(f'Currency code "{currency}" not implemented for "{self.__class__.__name__}"')

        minus_str = f"{self.negword.strip()} " if is_negative else ""
        money_str = self.to_cardinal(left)
        cents_str = self.to_cardinal(right) if cents else self.to_cardinal(right)[:2]

        if adjective and currency in self.CURRENCY_ADJECTIVES:
            cr1 = self.prefix_currency(self.CURRENCY_ADJECTIVES[currency], cr1)

        return f"{minus_str}{money_str} {self.pluralize(left, cr1)}{separator} {cents_str} {self.pluralize(right, cr2)}"
        

    def prefix_currency(self, adjective, currency):
        return f"{adjective} {currency}"


    def split_number(self, val):
        """
        Split a number into integer and decimal parts, and detect if it's negative.
        """
        is_negative = val < 0
        val = abs(val)
        left = int(val)
        right = int(round((val - left) * 100))
        return left, right, is_negative
    

    def pluralize(self, n, forms):
        form = 0 if n < 2 else 1
        return forms[form]

